# Evaluación Técnica - Desarrollador Frontend Junior

## Descripción

Esta evaluación tiene como objetivo medir tus habilidades en el desarrollo frontend, específicamente en:

- Consumo de APIs
- Manejo de datos asíncronos
- Renderizado de datos
- Estilizado básico

## Requisitos Técnicos

- HTML5
- CSS3
- JavaScript (ES6+)
- Consumo de APIs con fetch o axios

## API a Utilizar

- Rick and Morty API: https://rickandmortyapi.com/
- Endpoint: https://rickandmortyapi.com/api/character

## Tarea

Crear una aplicación web que muestre los personajes de Rick y Morty con la siguiente información:

1. Imagen del personaje
2. Nombre del personaje
3. Especie
4. Estado (vivo/muerto)

### Requisitos Funcionales

1. Mostrar al menos 20 personajes
2. Implementar paginación básica
3. Cada personaje debe mostrarse en una tarjeta con diseño responsivo
4. Implementar un buscador por nombre del personaje
5. Mostrar un indicador de carga mientras se obtienen los datos

### Requisitos Técnicos

1. Usar fetch o axios para consumir la API
2. Implementar manejo de errores
3. Usar async/await o promesas para el manejo asíncrono
4. El código debe estar organizado y comentado
5. Usar CSS para estilizar las tarjetas

### Criterios de Evaluación

1. **Funcionalidad (40%)**

   - La aplicación funciona correctamente
   - Se muestran todos los datos requeridos
   - La paginación funciona
   - El buscador funciona

2. **Código (30%)**

   - Limpieza y organización del código
   - Manejo de errores
   - Uso de buenas prácticas
   - Comentarios explicativos

3. **Diseño (20%)**

   - Diseño responsivo
   - Estética de las tarjetas
   - Uso de CSS

4. **Performance (10%)**
   - Tiempo de carga
   - Optimización de recursos

## Tiempo Estimado

- 2 horas

## Entrega

1. Crear un repositorio en GitHub
2. Subir el código fuente
3. Incluir un README.md con:
   - Instrucciones de instalación
   - Descripción del proyecto
   - Tecnologías utilizadas

## Ejemplo de Estructura de Código

```javascript
// Ejemplo de estructura básica
async function getCharacters() {
  try {
    const response = await fetch('https://rickandmortyapi.com/api/character');
    const data = await response.json();
    return data.results;
  } catch (error) {
    console.error('Error:', error);
  }
}

// Ejemplo de estructura HTML
<div class="character-card">
  <img src="[URL_IMAGEN]" alt="[NOMBRE_PERSONAJE]">
  <h2>[NOMBRE_PERSONAJE]</h2>
  <p>Especie: [ESPECIE]</p>
  <p>Estado: [ESTADO]</p>
</div>
```

## Puntos Extra

1. Implementar filtros adicionales (especie, estado)
2. Agregar animaciones a las tarjetas
3. Implementar un modo oscuro
4. Agregar tests unitarios
5. Implementar un sistema de favoritos

## Notas

- Se valorará la creatividad en el diseño
- Se puede usar cualquier framework o librería de CSS
- Se puede usar TypeScript si se desea
- Se puede usar cualquier bundler (Webpack, Vite, etc.)
